<!DOCTYPE html>
<!-- saved from url=(0034)http://127.0.0.1:5500/EXP/EEE.HTML -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Expense Tracker</title>
    <script src="./Smart Expense Tracker1_files/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #FFFFFF;
            transition: background-color 0.3s ease;
        }

        body.dark-mode {
            background-color: #FFB6C1;
            color: black;
        }

        header {
            background: #1A2732;
            color: tan;
            text-align: center;
            padding: 1rem 0;
        }

        .section {
            display: none;
            opacity: 0;
            transition: opacity 0.5s ease, transform 0.5s ease;
            transform: translateY(20px);
        }

        .section.active {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }

        .homepage {
            text-align: center;
            padding: 5rem 1rem;
        }

        .homepage h1 {
            font-size: 2.5rem;
            animation: fadeIn 2s ease-in-out;
        }

        .homepage button, .dark-mode-toggle {
            margin-top: 2rem;
            padding: 1rem 2rem;
            font-size: 1rem;
            color: white;
            background: #AED6F1;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            animation: fadeIn 3s ease-in-out;
        }

        .homepage button:hover, .dark-mode-toggle:hover {
            background: #;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        .popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            display: none;
            animation: fadeInPopup 0.5s ease-in-out;
        }

        @keyframes fadeInPopup {
            from {
                opacity: 0;
                transform: translate(-50%, -50%) scale(0.8);
            }
            to {
                opacity: 1;
                transform: translate(-50%, -50%) scale(1);
            }
        }

        .popup.active {
            display: block;
        }

        .popup h3 {
            margin-top: 0;
        }

        .popup button {
            margin-top: 1rem;
            padding: 0.5rem 1rem;
            background: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }

        .popup button:hover {
            background: #E6E6FA;
        }

        .form-section {
            margin-bottom: 2rem;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            background: white;
        }

        form {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
        }

        form input, form select, form button {
            padding: 0.5rem;
            font-size: 1rem;
        }

        form button {
            background-color: #D4A373;
            color: white;
            border: none;
            cursor: pointer;
        }

        form button:hover {
            background-color: #D4A373;
        }

        .expense-list, .bank-info {
            margin-top: 2rem;
        }

        .expense-item, .bank-item {
            display: flex;
            justify-content: space-between;
            padding: 1rem;
            margin: 0.5rem 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .expense-summary {
            margin-top: 2rem;
            font-size: 1.2rem;
        }

        .budget-section {
            margin-top: 2rem;
            padding: 1rem;
            background: white;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .dashboard {
            padding: 2rem;
            text-align: center;
        }

        .dashboard canvas {
            margin: 20px 0;
        }

        /* Chatboard */
        .chatboard-popup {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #C2EAEA;
            padding: 1rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            display: none;
            animation: chatboardPopup 0.5s ease-in-out;
        }

        @keyframes chatboardPopup {
            from {
                opacity: 0;
                transform: translate(100%, 0);
            }
            to {
                opacity: 1;
                transform: translate(0, 0);
            }
        }

        .chatboard-popup.active {
            display: block;
        }

        .chatboard-popup button {
            margin-top: 1rem;
            padding: 0.5rem 1rem;
            background: #FF007F;
            color: pink;
            border: none;
            cursor: pointer;
        }

        .chatboard-popup button:hover {
            background: #AED6F1;
        }
    </style>
</head>
<body>
    <header>
        <h1>Smart Expense Tracker</h1>
        <button class="dark-mode-toggle" onclick="toggleDarkMode()">Toggle Dark Mode</button>
        <button onclick="showChatboardPopup()">Open Chatboard</button>
    </header>

    <!-- Homepage -->
    <div class="section homepage active" id="homepage">
        <h1>Welcome to Smart Expense Tracker</h1>
        <button onclick="showBankPopup()">Get Started</button>
    </div>

    <!-- Bank Account Popup -->
    <div class="popup" id="bankPopup">
        <h3>Link Your Bank Account</h3>
        <form id="bankForm">
            <input type="text" id="bankName" placeholder="Bank Name" required="">
            <input type="text" id="accountNumber" placeholder="Account Number" required="">
            <input type="text" id="ifscCode" placeholder="IFSC Code" required="">
            <button type="submit">Link Bank Account</button>
        </form>
        <button onclick="closeBankPopup()">Cancel</button>
    </div>

    <!-- Dashboard with Charts -->
    <div class="section dashboard" id="dashboard">
        <h2>Dashboard</h2>
        <div>
            <canvas id="expenseChart" width="0" height="0" style="display: block; box-sizing: border-box; height: 0px; width: 0px;"></canvas>
        </div>
        <div>
            <canvas id="categoryChart" width="0" height="0" style="display: block; box-sizing: border-box; height: 0px; width: 0px;"></canvas>
        </div>
        <button onclick="showExpenseTracker()">Go to Expense Tracker</button>
    </div>

    <!-- Expense Tracker -->
    <main class="section" id="expenseTracker">
        <div class="form-section">
            <h3>Add Expense</h3>
            <form id="expenseForm">
                <input type="text" id="description" placeholder="Expense Description" required="">
                <input type="number" id="amount" placeholder="Amount in INR" required="">
                <input type="date" id="date" required="">
                <select id="category" required="">
                    <option value="">Select Category</option>
                    <option value="Food">Food</option>
                    <option value="Transport">Transport</option>
                    <option value="Bills">Bills</option>
                    <option value="Entertainment">Entertainment</option>
                </select>
                <button type="submit">Add Expense</button>
            </form>
        </div>

        <div class="budget-section">
            <h3>Set Monthly Budget</h3>
            <form id="budgetForm">
                <input type="number" id="monthlyBudget" placeholder="Enter Monthly Budget (INR)" required="">
                <button type="submit">Set Budget</button>
            </form>
            <div id="budgetStatus">No budget set.</div>
        </div>

        <div class="expense-list" id="expenseList"></div>
        <div class="expense-summary" id="expenseSummary">Total Expense: ₹0.00</div>
    </main>

    <!-- Chatboard Popup -->
    <div class="chatboard-popup" id="chatboardPopup">
        <h3>Expense Summary</h3>
        <div>
            <canvas id="expenseHistoryChart" width="300" height="200"></canvas>
        </div>
        <div>
            <p>Monthly Savings: ₹<span id="monthlySavings">0</span></p>
            <p>Total Expenses: ₹<span id="totalExpenses">0</span></p>
        </div>
        <button onclick="closeChatboardPopup()">Close</button>
    </div>

    <script>
        const homepage = document.getElementById('homepage');
        const bankPopup = document.getElementById('bankPopup');
        const expenseTracker = document.getElementById('expenseTracker');
        const dashboard = document.getElementById('dashboard');
        const chatboardPopup = document.getElementById('chatboardPopup');
        const expenseList = document.getElementById('expenseList');
        const expenseSummary = document.getElementById('expenseSummary');
        const expenseForm = document.getElementById('expenseForm');
        const bankForm = document.getElementById('bankForm');
        const budgetForm = document.getElementById('budgetForm');
        const monthlyBudgetField = document.getElementById('monthlyBudget');
        const monthlySavingsField = document.getElementById('monthlySavings');
        const totalExpensesField = document.getElementById('totalExpenses');
        const ctxExpense = document.getElementById('expenseChart').getContext('2d');
        const ctxCategory = document.getElementById('categoryChart').getContext('2d');
        const ctxExpenseHistory = document.getElementById('expenseHistoryChart').getContext('2d');

        let expenses = [];
        let monthlyBudget = 0;

        function showBankPopup() {
            bankPopup.classList.add('active');
        }

        function closeBankPopup() {
            bankPopup.classList.remove('active');
        }

        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
        }

        function showDashboard() {
            dashboard.classList.add('active');
            expenseTracker.classList.remove('active');
            renderCharts();
        }

        function showExpenseTracker() {
            expenseTracker.classList.add('active');
            dashboard.classList.remove('active');
        }

        function showChatboardPopup() {
            chatboardPopup.classList.add('active');
            renderChatboard();
        }

        function closeChatboardPopup() {
            chatboardPopup.classList.remove('active');
        }

        bankForm.addEventListener('submit', (e) => {
            e.preventDefault();
            bankPopup.classList.remove('active');
            homepage.classList.remove('active');
            expenseTracker.classList.add('active');
        });

        expenseForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const description = document.getElementById('description').value;
            const amount = parseFloat(document.getElementById('amount').value);
            const date = document.getElementById('date').value;
            const category = document.getElementById('category').value;
            const expense = { description, amount, date, category };
            expenses.push(expense);
            localStorage.setItem('expenses', JSON.stringify(expenses));
            expenseForm.reset();
            renderExpenses();
        });

        budgetForm.addEventListener('submit', (e) => {
            e.preventDefault();
            monthlyBudget = parseFloat(monthlyBudgetField.value);
            localStorage.setItem('monthlyBudget', monthlyBudget);
            renderBudget();
        });

        function renderExpenses() {
            expenseList.innerHTML = '';
            expenses.forEach((expense, index) => {
                const expenseItem = document.createElement('div');
                expenseItem.className = 'expense-item';
                expenseItem.innerHTML = `
                    <span>${expense.description} - ₹${expense.amount.toFixed(2)} (${expense.category}) (${expense.date})</span>
                    <button onclick="deleteExpense(${index})">Delete</button>
                `;
                expenseList.appendChild(expenseItem);
            });

            const totalExpense = expenses.reduce((total, expense) => total + expense.amount, 0);
            expenseSummary.textContent = `Total Expense: ₹${totalExpense.toFixed(2)}`;

            // Show budget warning
            if (monthlyBudget > 0 && totalExpense > monthlyBudget) {
                expenseSummary.innerHTML += `<br><strong>Warning: You've exceeded your budget!</strong>`;
            }
        }

        function renderBudget() {
            if (monthlyBudget > 0) {
                budgetStatus.textContent = `Monthly Budget: ₹${monthlyBudget.toFixed(2)}`;
            } else {
                budgetStatus.textContent = `No budget set.`;
            }
        }

        function renderCharts() {
            const totalExpense = expenses.reduce((total, expense) => total + expense.amount, 0);
            const categoryData = expenses.reduce((acc, expense) => {
                acc[expense.category] = (acc[expense.category] || 0) + expense.amount;
                return acc;
            }, {});

            new Chart(ctxExpense, {
                type: 'pie',
                data: {
                    labels: ['Total Expenses'],
                    datasets: [{
                        label: 'Total Expense',
                        data: [totalExpense],
                        backgroundColor: ['#D4A373'],
                    }]
                }
            });

            new Chart(ctxCategory, {
                type: 'pie',
                data: {
                    labels: Object.keys(categoryData),
                    datasets: [{
                        label: 'Category Expenses',
                        data: Object.values(categoryData),
                        backgroundColor: ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99'],
                    }]
                }
            });
        }

        function renderChatboard() {
            const totalExpense = expenses.reduce((total, expense) => total + expense.amount, 0);
            const savings = monthlyBudget - totalExpense;

            totalExpensesField.textContent = totalExpense.toFixed(2);
            monthlySavingsField.textContent = savings.toFixed(2);

            new Chart(ctxExpenseHistory, {
                type: 'pie',
                data: {
                    labels: expenses.map(exp => exp.date),
                    datasets: [{
                        label: 'Expenses History',
                        data: expenses.map(exp => exp.amount),
                        backgroundColor: '#D4A373',
                    }]
                }
            });
        }
        function showAlert(message, type = 'info') {
    const alertContainer = document.getElementById('alertContainer');
    const alert = document.createElement('div');
    alert.className = `alert ${type}`;
    alert.textContent = message;

    alertContainer.appendChild(alert);
    alert.style.display = 'block';

    // Automatically hide the alert after 3 seconds
    setTimeout(() => {
        alert.style.display = 'none';
        alertContainer.removeChild(alert);
    }, 3000);
}
        document.addEventListener('DOMContentLoaded', () => {
    expenses = JSON.parse(localStorage.getItem('expenses')) || [];
    monthlyBudget = parseFloat(localStorage.getItem('monthlyBudget')) || 0;
    renderExpenses();
    renderBudget();
    renderCharts();
});

        function deleteExpense(index) {
            expenses.splice(index, 1);
            localStorage.setItem('expenses', JSON.stringify(expenses));
            renderExpenses();
        }

        // Initial render
        renderExpenses();
        renderBudget();
    </script>
<!-- Code injected by live-server -->
<script>
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</body></html>